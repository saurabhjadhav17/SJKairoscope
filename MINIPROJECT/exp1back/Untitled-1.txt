#include <bits/stdc++.h>
using namespace std;
struct MinHeapNode
{
    // The element to be stored
    int element;
    // index of the array from which the element is taken
    int i;
};
// Prototype of a utility function to swap two min heap nodes
void swap(MinHeapNode *x, MinHeapNode *y);
// A class for Min Heap
class MinHeap
{
    MinHeapNode *harr; // pointer to array of elements in heap
    int heap_size;     // size of min heap
public:
    // Constructor: creates a min heap of given size
    MinHeap(MinHeapNode a[], int size);
    // to heapify a subtree with root at given index
    void MinHeapify(int);
    // to get index of left child of node at index i
    int left(int i) { return (2 * i + 1); }
    // to get index of right child of node at index i
    int right(int i) { return (2 * i + 2); }
    // to get the root
    MinHeapNode getMin() { return harr[0]; }
    void replaceMin(MinHeapNode x)
    {
        harr[0] = x;
        MinHeapify(0);
    }
};
MinHeap::MinHeap(MinHeapNode a[], int size)
{
    heap_size = size;
    harr = a; // store address of array
    int i = (heap_size - 1) / 2;
    while (i >= 0)
    {
        MinHeapify(i);
        i--;
    }
}
void MinHeap::MinHeapify(int i)
{
    int l = left(i);
    int r = right(i);
    int smallest = i;
    if (l < heap_size && harr[l].element < harr[i].element)
        smallest = l;
    if (r < heap_size && harr[r].element < harr[smallest].element)
        smallest = r;
    if (smallest != i)
    {
        swap(&harr[i], &harr[smallest]);
        MinHeapify(smallest);
    }
}
void swap(MinHeapNode *x, MinHeapNode *y)
{
    MinHeapNode temp = *x;
    *x = *y;
    *y = temp;
}
void merge(int arr[], int l, int m, int r)
{
    int i, j, k;
    int n1 = m - l + 1;
    int n2 = r - m;
    /* create temp arrays */
    int L[n1], R[n2];
    /* Copy data to temp arrays L[] and R[] */
    for (i = 0; i < n1; i++)
        L[i] = arr[l + i];
    for (j = 0; j < n2; j++)
        R[j] = arr[m + 1 + j];
    i = 0; // Initial index of first subarray
    j = 0; // Initial index of second subarray
    k = l; // Initial index of merged subarray
    while (i < n1 && j < n2)
    {
        if (L[i] <= R[j])
            arr[k++] = L[i++];
        else
            arr[k++] = R[j++];
    }
    while (i < n1)
        arr[k++] = L[i++];
    while (j < n2)
        arr[k++] = R[j++];
}
void mergeSort(int arr[], int l, int r)
{
    if (l < r)
    {
        int m = l + (r - l) / 2;
        mergeSort(arr, l, m);
        mergeSort(arr, m + 1, r);
        merge(arr, l, m, r);
    }
}
FILE *openFile(char *fileName, char *mode)
{
    FILE *fp = fopen(fileName, mode);
    if (fp == NULL)
    {
        perror("Error while opening the file.\n");
        exit(EXIT_FAILURE);
    }
    return fp;
}
void mergeFiles(char *output_file, int n, int k)
{
    FILE *in[k];
    for (int i = 0; i < k; i++)
    {
        char fileName[2];
        // convert i to string
        snprintf(fileName, sizeof(fileName), "%d", i);
        // Open output files in read mode.
        in[i] = openFile(fileName, "r");
    }
    FILE *out = openFile(output_file, "w");
    MinHeapNode *harr = new MinHeapNode[k];
    int i;
    for (i = 0; i < k; i++)
    {
        if (fscanf(in[i], "%d ", &harr[i].element) != 1)
            break;
        harr[i].i = i; // Index of scratch output file
    }
    MinHeap hp(harr, i); // Create the heap
    int count = 0;
    while (count != i)
    {
        MinHeapNode root = hp.getMin();
        fprintf(out, "%d ", root.element);
        if (fscanf(in[root.i], "%d ", &root.element) != 1)
        {
            root.element = INT_MAX;
            count++;
        }
        // Replace root with next element of input file
        hp.replaceMin(root);
    }
    // close input and output files
    for (int i = 0; i < k; i++)
        fclose(in[i]);
    fclose(out);
}
void createInitialRuns(char *input_file, int run_size,
                       int num_ways)
{
    // For big input file
    FILE *in = openFile(input_file, "r");
    // output scratch files
    FILE *out[num_ways];
    char fileName[10];
    for (int i = 0; i < num_ways; i++)
    {
        // convert i to string
        snprintf(fileName, sizeof(fileName), "%d", i);
        // Open output files in write mode.
        out[i] = openFile(fileName, "w");
    }
    int *arr = (int *)malloc(run_size * sizeof(int));
    bool more_input = true;
    int next_output_file = 0;
    int i;
    while (more_input)
    {
        // write run_size elements into arr from input file
        for (i = 0; i < run_size; i++)
        {
            if (fscanf(in, "%d ", &arr[i]) != 1)
            {
                more_input = false;
                break;
            }
        }
        // sort array using merge sort
        mergeSort(arr, 0, i - 1);
        for (int j = 0; j < i; j++)
            fprintf(out[next_output_file], "%d ", arr[j]);
        next_output_file++;
    }
    // close input and output files
    for (int i = 0; i < num_ways; i++)
        fclose(out[i]);
    fclose(in);
}
// For sorting data stored on disk
void externalSort(char *input_file, char *output_file,
                  int num_ways, int run_size)
{
    // read the input file, create the initial runs,
    // and assign the runs to the scratch output files
    createInitialRuns(input_file, run_size, num_ways);
    // Merge the runs using the K-way merging
    mergeFiles(output_file, run_size, num_ways);
}
// Driver program to test above
int main()
{
    // No. of Partitions of input file.
    int num_ways = 2;
    // The size of each partition
    int run_size = 50;
    FILE *fptr;
    char input_file[] = "Input.txt";
    char output_file[] = "output.txt";
    // creating a file "random.txt" in "write" mode
    fptr = fopen(input_file, "w");
    long long i;
    if (fptr == NULL)
    {
        printf("ERROR");
        exit(1);
    }
    for (i = 0; i < 100; i++)
    {
        // to generate number less than 100000
        int val = rand() % 10000000;
        // storing data to file
        fprintf(fptr, "%d ", val);
    }
    // closing the file
    fclose(fptr);
    printf("numbers generated successfully !! ");
    externalSort(input_file, output_file, num_ways,
                 run_size);
    return 0;
}
